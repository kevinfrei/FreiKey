# Logically: macro(arduino_library libname hdrPath srcList...)
# Not sure this is worth the extra effort honestly...
macro(add_arduino_library libname hdrPath)
  project(arduino_${libname}_library)

  # For header-only arduino libs, you have to use an "interface" library
  if(${ARGC} EQUAL 2)
    add_library(${libname}_lib INTERFACE)
    target_include_directories(${libname}_lib INTERFACE ${hdrPath})
  else()
    add_library(${libname}_lib OBJECT ${ARGN})
    target_include_directories(${libname}_lib PUBLIC ${hdrPath})
    target_link_libraries(${libname}_lib PUBLIC teensy4_syslib)
  endif()
endmacro(add_arduino_library)

macro(add_arduino_executable binary)
  add_executable(${binary} ${ARGN})
  string(REGEX REPLACE "\.elf$" "" RAW_TARGET_${binary} ${binary})
  add_custom_target(
  ${RAW_TARGET_${binary}}.hex
  ALL
  ${CMAKE_OBJCOPY}
  -O ihex
  -R .eeprom
  ${CMAKE_CURRENT_BINARY_DIR}/${binary}
  ${RAW_TARGET_${binary}}.hex
  DEPENDS ${binary}
  VERBATIM
)
endmacro()

# This is the set of menu options for the teensy40 board
macro(teensy40_menu_selections A2CM_IN_USB A2CM_IN_SPEED A2CM_IN_OPT A2CM_IN_KEYS)
  set(A2CM_BUILD_BOARD, TEENSY40)

  if(${A2CM_IN_USB} STREQUAL serial)
    set(A2CM_BUILD_USBTYPE USB_SERIAL)
  elseif(${A2CM_IN_USB} STREQUAL serial2)
    set(A2CM_BUILD_USBTYPE USB_DUAL_SERIAL)
  elseif(${A2CM_IN_USB} STREQUAL serial3)
    set(A2CM_BUILD_USBTYPE USB_TRIPLE_SERIAL)
  elseif(${A2CM_IN_USB} STREQUAL keyboard)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_KEYBOARDONLY)
  elseif(${A2CM_IN_USB} STREQUAL touch)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_TOUCHSCREEN)
  elseif(${A2CM_IN_USB} STREQUAL hidtouch)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_HID_TOUCHSCREEN)
  elseif(${A2CM_IN_USB} STREQUAL hid)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_HID)
  elseif(${A2CM_IN_USB} STREQUAL serialhid)
    set(A2CM_BUILD_USBTYPE USB_SERIAL_HID)
  elseif(${A2CM_IN_USB} STREQUAL midi)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_MIDI)
  elseif(${A2CM_IN_USB} STREQUAL midi4)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_MIDI4)
  elseif(${A2CM_IN_USB} STREQUAL midi16)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_MIDI16)
  elseif(${A2CM_IN_USB} STREQUAL serialmidi)
    set(A2CM_BUILD_USBTYPE USB_MIDI_SERIAL)
  elseif(${A2CM_IN_USB} STREQUAL serialmidi4)
    set(A2CM_BUILD_USBTYPE USB_MIDI4_SERIAL)
  elseif(${A2CM_IN_USB} STREQUAL serialmidi16)
    set(A2CM_BUILD_USBTYPE USB_MIDI16_SERIAL)
  elseif(${A2CM_IN_USB} STREQUAL audio)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_AUDIO)
  elseif(${A2CM_IN_USB} STREQUAL serialmidiaudio)
    set(A2CM_BUILD_USBTYPE USB_MIDI_AUDIO_SERIAL)
  elseif(${A2CM_IN_USB} STREQUAL serialmidi16audio)
    set(A2CM_BUILD_USBTYPE USB_MIDI16_AUDIO_SERIAL)
  elseif(${A2CM_IN_USB} STREQUAL mtp)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_MTPDISK)
  elseif(${A2CM_IN_USB} STREQUAL rawhid)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_RAWHID)
  elseif(${A2CM_IN_USB} STREQUAL flightsim)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_FLIGHTSIM)
  elseif(${A2CM_IN_USB} STREQUAL flightsimjoystick)
    set(A2CM_FAKE_SERIAL teensy_gateway)
    set(A2CM_BUILD_USBTYPE USB_FLIGHTSIM_JOYSTICK)
  else()
    message(FATAL_ERROR "Invalid A2CM_IN_USB (1st) argument to arduino_menu_selections: ${A2CM_IN_USB}")
  endif()

  if(${A2CM_IN_SPEED} STREQUAL 600)
    set(A2CM_BUILD_FCPU 600000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 528)
    set(A2CM_BUILD_FCPU 528000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 450)
    set(A2CM_BUILD_FCPU 450000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 396)
    set(A2CM_BUILD_FCPU 396000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 150)
    set(A2CM_BUILD_FCPU 150000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 24)
    set(A2CM_BUILD_FCPU 24000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 720)
    set(A2CM_BUILD_FCPU 720000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 816)
    set(A2CM_BUILD_FCPU 816000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 912)
    set(A2CM_BUILD_FCPU 912000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 960)
    set(A2CM_BUILD_FCPU 960000000)
  elseif(${A2CM_IN_SPEED} STREQUAL 1008)
    set(A2CM_BUILD_FCPU 1008000000)
  else()
    message(FATAL_ERROR "Invalid A2CM_IN_SPEED (2nd) argument to arduino_menu_selections")
  endif()

  if(${A2CM_IN_OPT} STREQUAL o2std)
    set(A2CM_BUILD_FLAGS_OPTIMIZE -O2)
  elseif(${A2CM_IN_OPT} STREQUAL o1std)
    set(A2CM_BUILD_FLAGS_OPTIMIZE -O1)
  elseif(${A2CM_IN_OPT} STREQUAL o3std)
    set(A2CM_BUILD_FLAGS_OPTIMIZE -O3)
  elseif(${A2CM_IN_OPT} STREQUAL ogstd)
    set(A2CM_BUILD_FLAGS_OPTIMIZE -Og)
  elseif(${A2CM_IN_OPT} STREQUAL osstd)
    set(A2CM_BUILD_FLAGS_OPTIMIZE -Os --specs nano.specs)
  else()
    message(FATAL_ERROR "Invalid A2CM_IN_OPT (3rd) argument to arduino_menu_selections")
  endif()

  if(${A2CM_IN_KEYS} STREQUAL en-us)
    set(A2CM_BUILD_KEYLAYOUT US_ENGLISH)
  elseif(${A2CM_IN_KEYS} STREQUAL fr-ca)
    set(A2CM_BUILD_KEYLAYOUT CANADIAN_FRENCH)
  elseif(${A2CM_IN_KEYS} STREQUAL xx-ca)
    set(A2CM_BUILD_KEYLAYOUT CANADIAN_MULTILINGUAL)
  elseif(${A2CM_IN_KEYS} STREQUAL cz-cz)
    set(A2CM_BUILD_KEYLAYOUT CZECH)
  elseif(${A2CM_IN_KEYS} STREQUAL da-da)
    set(A2CM_BUILD_KEYLAYOUT DANISH)
  elseif(${A2CM_IN_KEYS} STREQUAL fi-fi)
    set(A2CM_BUILD_KEYLAYOUT FINNISH)
  elseif(${A2CM_IN_KEYS} STREQUAL fr-fr)
    set(A2CM_BUILD_KEYLAYOUT FRENCH)
  elseif(${A2CM_IN_KEYS} STREQUAL fr-be)
    set(A2CM_BUILD_KEYLAYOUT FRENCH_BELGIAN)
  elseif(${A2CM_IN_KEYS} STREQUAL fr-ch)
    set(A2CM_BUILD_KEYLAYOUT FRENCH_SWISS)
  elseif(${A2CM_IN_KEYS} STREQUAL de-de)
    set(A2CM_BUILD_KEYLAYOUT GERMAN)
  elseif(${A2CM_IN_KEYS} STREQUAL de-dm)
    set(A2CM_BUILD_KEYLAYOUT GERMAN_MAC)
  elseif(${A2CM_IN_KEYS} STREQUAL de-ch)
    set(A2CM_BUILD_KEYLAYOUT GERMAN_SWISS)
  elseif(${A2CM_IN_KEYS} STREQUAL is-is)
    set(A2CM_BUILD_KEYLAYOUT ICELANDIC)
  elseif(${A2CM_IN_KEYS} STREQUAL en-ie)
    set(A2CM_BUILD_KEYLAYOUT IRISH)
  elseif(${A2CM_IN_KEYS} STREQUAL it-it)
    set(A2CM_BUILD_KEYLAYOUT ITALIAN)
  elseif(${A2CM_IN_KEYS} STREQUAL no-no)
    set(A2CM_BUILD_KEYLAYOUT NORWEGIAN)
  elseif(${A2CM_IN_KEYS} STREQUAL pt-pt)
    set(A2CM_BUILD_KEYLAYOUT PORTUGUESE)
  elseif(${A2CM_IN_KEYS} STREQUAL pt-br)
    set(A2CM_BUILD_KEYLAYOUT PORTUGUESE_BRAZILIAN)
  elseif(${A2CM_IN_KEYS} STREQUAL rs-rs)
    set(A2CM_BUILD_KEYLAYOUT SERBIAN_LATIN_ONLY)
  elseif(${A2CM_IN_KEYS} STREQUAL es-es)
    set(A2CM_BUILD_KEYLAYOUT SPANISH)
  elseif(${A2CM_IN_KEYS} STREQUAL es-mx)
    set(A2CM_BUILD_KEYLAYOUT SPANISH_LATIN_AMERICA)
  elseif(${A2CM_IN_KEYS} STREQUAL sv-se)
    set(A2CM_BUILD_KEYLAYOUT SWEDISH)
  elseif(${A2CM_IN_KEYS} STREQUAL tr-tr)
    set(A2CM_BUILD_KEYLAYOUT TURKISH)
  elseif(${A2CM_IN_KEYS} STREQUAL en-gb)
    set(A2CM_BUILD_KEYLAYOUT UNITED_KINGDOM)
  elseif(${A2CM_IN_KEYS} STREQUAL usint)
    set(A2CM_BUILD_KEYLAYOUT US_INTERNATIONAL)
  else()
    message(FATAL_ERROR "Invalid A2CM_IN_KEYS (4th) argument to arduino_menu_selections")
  endif()

  # message(NOTICE "Cur Location: ${CMAKE_CURRENT_SOURCE_DIR}")
endmacro(teensy40_menu_selections)